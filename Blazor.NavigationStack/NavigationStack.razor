@implements INavigationStack


<CascadingValue TValue="INavigationStack" IsFixed="true" Value="this">
    @LayoutFragment
</CascadingValue>


@code {

    public static readonly RenderFragment<HeaderContext> DefaultHeaderRenderer = context => {
        return __builder => {
            <div class="navigation-stack-header">
                @if (context.IsActive) {
                    <strong>
                        @context.Name
                    </strong>
                } else {
                    @context.Name
                }
            </div>
        };
    };

    public static readonly RenderFragment DefaultHeaderSeparator = __builder => {
        <div>
            ▶
        </div>
    };

    private RenderFragment HeaderFragment(HeaderContext context) {
        return __builder => {
            if (Header == null) {
                @DefaultHeaderRenderer(context)
            } else {
                @Header(context)
            }
        };
    }

    private RenderFragment ContentFragment {
        get { return _stack.Peek().Content; }
    }

    private RenderFragment LayoutFragment {
        get {
            return __builder => {
                @if (Layout == null) {
                    <div style="display: flex; flex-direction: column;">
                        <div style="display: flex; flex-direction: row; flex-wrap: wrap;">
                            <div>
                                @HeaderStackFragment
                            </div>
                            <div style="margin-left: auto;">
                                <div style="display: flex; flex-direction: row; flex-wrap: wrap;">
                                    <div>@BackFragment</div>
                                    <div>@MenuFragment</div>
                                </div>
                            </div>
                        </div>
                        <div style="flex: 1 1 auto; overflow-y: auto; height: 100%;">
                            @ContentFragment
                        </div>
                    </div>
                } else {
                    @Layout(new LayoutContext() {
                        Content = ContentFragment,
                        HeaderStack = HeaderStackFragment,
                        MenuStack = MenuFragment,
                        BackButton = BackFragment,
                    })
                }
            };
        }
    }

    private RenderFragment HeaderStackFragment {
        get {
            return __builder => {
                StackPage reverseLast = _stack.Peek();
                @if (HeaderStack == null) {
                    <div style="display: flex; flex-direction: row; flex-wrap: wrap; gap: 5px;">
                        @foreach (StackPage page in _stack.Reverse()) {
                            if (page.Name == null) continue;
                            bool isLast = page == reverseLast;
                            @HeaderFragment(new HeaderContext() {
                                IsActive = isLast,
                                Name = page.Name,
                            })
                            if (!isLast) {
                                if (HeaderSeparator == null) {
                                    @DefaultHeaderSeparator
                                } else {
                                    @HeaderSeparator
                                }
                            }
                        }
                    </div>
                } else {
                    @HeaderStack(new HeaderStackContext() {
                        Headers = _stack.Select(page => HeaderFragment(new HeaderContext() {
                            IsActive = page == reverseLast,
                            Name = page.Name,
                        })),
                        Separator = HeaderSeparator ?? DefaultHeaderSeparator,
                    })
                }

            };
        }
    }

    private RenderFragment MenuFragment {
        get { return _stack.Peek().Menu ?? _emptyFragment; }
    }

    private RenderFragment BackFragment {
        get {
            return __builder => {
                if (_stack.Count <= 1) return;
                @if (Back == null) {
                    <button @onclick="_onBackAction">
                        ◀ BACK
                    </button>
                } else {
                    @Back(new BackContext() { Back = _onBackAction })
                }
            };
        }
    }


    /// <summary>
    /// Customizes the overall layout of the <see cref="NavigationStack"/> component.
    /// When provided, replaces the default layout with custom rendering.
    /// </summary>
    [Parameter]
    public RenderFragment<LayoutContext>? Layout { get; set; }

    /// <summary>
    /// Customizes how the header navigation stack is rendered.
    /// When provided, replaces the default header stack rendering with a custom implementation.
    /// </summary>
    /// <remarks>
    /// The HeaderStackContext provides access to all header fragments and the separator
    /// used between them, allowing complete customization of the breadcrumb-like navigation.
    /// </remarks>
    [Parameter]
    public RenderFragment<HeaderStackContext>? HeaderStack { get; set; }

    /// <summary>
    /// Customizes how individual headers in the navigation stack are rendered.
    /// When provided, replaces the default header rendering with a custom implementation.
    /// </summary>
    [Parameter]
    public RenderFragment<HeaderContext>? Header { get; set; }

    /// <summary>
    /// Customizes the separator displayed between headers in the navigation stack.
    /// When provided, replaces the default "▶" separator with custom content.
    /// </summary>
    [Parameter]
    public RenderFragment? HeaderSeparator { get; set; }

    /// <summary>
    /// Customizes the menu display for the current page in the navigation stack.
    /// </summary>
    [Parameter]
    public RenderFragment<MenuContext>? Menu { get; set; }

    /// <summary>
    /// Customizes the back button appearance and behavior.
    /// When provided, replaces the default "◀ BACK" button with custom implementation.
    /// </summary>
    [Parameter]
    public RenderFragment<BackContext>? Back { get; set; }

    /// <summary>
    /// Event callback that is triggered when a new page is pushed onto the navigation stack.
    /// </summary>
    [Parameter]
    public EventCallback OnPushed { get; set; }

    /// <summary>
    /// Event callback that is triggered when a page is popped from the navigation stack.
    /// </summary>
    [Parameter]
    public EventCallback OnPop { get; set; }

    #region Base Properties 

    /// <summary>
    /// The initial content to display when the NavigationStack is first rendered.
    /// </summary>
    [Parameter]
    public RenderFragment? BaseContent { get; set; }

    /// <summary>
    /// The name to display in the header for the initial navigation page.
    /// </summary>
    [Parameter]
    public string? BaseName { get; set; }

    /// <summary>
    /// The menu content to display for the initial navigation page.
    /// </summary>
    [Parameter]
    public RenderFragment? BaseMenu { get; set; }

    #endregion

    private readonly Stack<StackPage> _stack = new();


    ///<inheritdoc cref="INavigationStack.Push{T}"/>
    public async Task<Result<T>> Push<T>(StackPage stackPage) {
        _stack.Push(stackPage);
        await OnPushed.InvokeAsync();
        StateHasChanged();
        object result = await stackPage.Task;
        (bool isCanceled, object? value) = ((bool, object?))result;
        return new Result<T>() {
            IsCanceled = isCanceled,
            Value = (T?)value,
        };
    }

    ///<inheritdoc cref="INavigationStack.Push"/>
    public Task Push(StackPage stackPage) {
        return Push<object>(stackPage);
    }

    ///<inheritdoc cref="INavigationStack.SetResult"/>
    public void SetResult(object value) {
        SetResult(false, value);
    }

    private void SetResult(bool isCanceled, object? value) {
        if (_stack.Count <= 1) return;
        StackPage page = _stack.Pop();
        page.SetResult((isCanceled, value));
        OnPop.InvokeAsync();
        StateHasChanged();
    }


    ///<inheritdoc cref="INavigationStack.SetMenu"/>
    public void SetMenu(RenderFragment renderFragment) {
        _stack.Peek().SetMenu(renderFragment);
        StateHasChanged();
    }

    ///<inheritdoc cref="INavigationStack.SetName"/>
    public void SetName(string name) {
        _stack.Peek().SetName(name);
        StateHasChanged();
    }

    private static readonly RenderFragment _emptyFragment = __builder => { };

    protected override void OnInitialized() {
        StackPage stackPage = new() {
            Content = BaseContent ?? _emptyFragment,
            Name = BaseName,
            Menu = BaseMenu,
        };
        _stack.Push(stackPage);
        _onBackAction = OnBackClicked;
    }

    private Action _onBackAction = null!;

    private void OnBackClicked() {
        SetResult(true, null);
    }

    public void Cancel() {
        OnBackClicked();
    }

    public void Refresh() {
        InvokeAsync(StateHasChanged);
    }

}


