<NavigationStack @ref="_stack" BaseName="Level 0"
                 Layout="Layout" HeaderStack="HeaderStack"
                 Header="Header" HeaderSeparator="HeaderSeparator"
                 Menu="Menu" Back="Back">
    <BaseContent>
        <h1>Level 0 Content</h1>
        <p>This is the starting point of the navigation stack. The NavigationStack component provides a way to navigate
            through stacked content while maintaining history.</p>
        @if (_data != null) {
            <div style="display: flex; width: 100%; padding: 10px 0 10px 0;">
                <table style="border-width: 1px; border-color: gray; border-style: solid; margin: auto;">
                    <tr>
                        <th colspan="2">
                            Selected Values
                        </th>
                    </tr>
                    <tr>
                        <td>Level1:</td>
                        <td>@_data.ValueFromLevel1</td>
                    </tr>
                    <tr>
                        <td>Level2:</td>
                        <td>@_data.ValueFromLevel2</td>
                    </tr>
                </table>
            </div>
        }
        <button @onclick="ShowLevel1">Select Values</button>
    </BaseContent>
</NavigationStack>

@code {

    [Parameter]
    public RenderFragment<NavigationStack.LayoutContext>? Layout { get; set; }

    [Parameter]
    public RenderFragment<NavigationStack.HeaderStackContext>? HeaderStack { get; set; }

    [Parameter]
    public RenderFragment<NavigationStack.HeaderContext>? Header { get; set; }

    [Parameter]
    public RenderFragment? HeaderSeparator { get; set; }

    [Parameter]
    public RenderFragment<NavigationStack.MenuContext>? Menu { get; set; }

    [Parameter]
    public RenderFragment<NavigationStack.BackContext>? Back { get; set; }


    private INavigationStack? _stack;
    private Data? _data;

    private class Data {
        public required string ValueFromLevel1 { get; init; }
        public required string ValueFromLevel2 { get; init; }
    }

    private async Task ShowLevel1() {
        if (_stack == null) return;
        string valueFromLevel1 = "";

        async Task Level1Next() {
            NavigationStack.Result<string> level2Result = await ShowLevel2();
            if (level2Result.IsCanceled || level2Result.Value == null) {
                return;
            }
            _stack.SetResult(new Data() {
                ValueFromLevel1 = valueFromLevel1,
                ValueFromLevel2 = level2Result.Value,
            });
        }

        RenderFragment Content() {
            return __builder => {
                <h1>Level 1 Content</h1>
                <p>
                    <label>Enter value:</label>
                    <input type="text" @bind="valueFromLevel1"/>
                </p>
                <button @onclick="Level1Next">Next</button>
            };
        }

        NavigationStack.Result<Data> result = await _stack.Push<Data>(new StackPage() {
            Content = Content(),
            Name = "Level1",
        });

        if (result.IsCanceled) return;
        _data = result.Value;
    }


    private async Task<NavigationStack.Result<string>> ShowLevel2() {
        if (_stack == null) return NavigationStack.Result<string>.Canceled;
        string value = "";

        void OkClicked() {
            _stack.SetResult(value);
        }

        RenderFragment Content() {
            return __builder => {
                <h1>Level 2 Content</h1>
                <p>
                    <label>Enter value:</label>
                    <input type="text" @bind="value"/>
                </p>
                <button @onclick="OkClicked">Ok</button>
            };
        }

        void CancelClicked() {
            _stack.Cancel();
            _stack.Cancel();
        }

        RenderFragment Menu() {
            return __builder => {
                <button @onclick="CancelClicked">✖ Cancel</button>
            };
        }

        NavigationStack.Result<string> result = await _stack.Push<string>(new StackPage() {
            Content = Content(),
            Name = "Level2",
            Menu = Menu(),
        });
        return result;
    }


}