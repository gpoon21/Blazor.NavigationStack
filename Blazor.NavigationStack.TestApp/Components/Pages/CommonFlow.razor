@using Blazor.NavigationStack.TestApp.Components.Pages.Stack

<NavigationStack @ref="_stack" BaseName="Level 0"
                 Layout="Layout" HeaderStack="HeaderStack"
                 Header="Header" HeaderSeparator="HeaderSeparator"
                 Menu="Menu" Back="Back">
    <BaseContent>
        <BaseContent
            Level="0"
            MessageContent="@MessageContent"
            DataValues="_data"
            OnSelectValues="ShowLevel1"/>
    </BaseContent>
</NavigationStack>

@code {

    [Parameter]
    public RenderFragment<NavigationStack.LayoutContext>? Layout { get; set; }

    [Parameter]
    public RenderFragment<NavigationStack.HeaderStackContext>? HeaderStack { get; set; }

    [Parameter]
    public RenderFragment<NavigationStack.HeaderContext>? Header { get; set; }

    [Parameter]
    public RenderFragment? HeaderSeparator { get; set; }

    [Parameter]
    public RenderFragment<NavigationStack.MenuContext>? Menu { get; set; }

    [Parameter]
    public RenderFragment<NavigationStack.BackContext>? Back { get; set; }

    [Parameter]
    public RenderFragment? MessageContent { get; set; }

    private INavigationStack? _stack;
    private BaseContent.Data? _data;


    private async Task ShowLevel1() {
        if (_stack == null) return;
        string valueFromLevel1 = "";

        async Task Level1Next() {
            NavigationStack.Result<string> level2Result = await ShowLevel2();
            if (level2Result.IsCanceled || level2Result.Value == null) {
                return;
            }
            _stack.SetResult(new BaseContent.Data() {
                ValueFromLevel1 = valueFromLevel1,
                ValueFromLevel2 = level2Result.Value,
            });
        }

        RenderFragment Content() {
            return __builder => {
                <LevelContent Level="1" @bind-Value="valueFromLevel1" OnNext="Level1Next"/>
            };
        }

        NavigationStack.Result<BaseContent.Data> result = await _stack.Push<BaseContent.Data>(new StackPage() {
            Content = Content(),
            Name = "Level1",
        });

        if (result.IsCanceled) return;
        _data = result.Value;
    }


    private async Task<NavigationStack.Result<string>> ShowLevel2() {
        if (_stack == null) return NavigationStack.Result<string>.Canceled;
        string value = "";

        void OkClicked() {
            _stack.SetResult(value);
        }

        RenderFragment Content() {
            return __builder => {
                <LevelContent Level="2" @bind-Value="value" OnNext="OkClicked" ButtonText="Ok"/>
            };
        }

        void CancelClicked() {
            _stack.Cancel();
            _stack.Cancel();
        }

        RenderFragment Menu() {
            return __builder => {
                <button @onclick="CancelClicked">✖ Cancel</button>
            };
        }

        NavigationStack.Result<string> result = await _stack.Push<string>(new StackPage() {
            Content = Content(),
            Name = "Level2",
            Menu = Menu(),
        });
        return result;
    }


}